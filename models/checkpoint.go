// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

// Checkpoint checkpoint is basic unit for cedana service operationit stores all the information regarding the snapshot we can use to save and then restore state
type Checkpoint struct {
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]any
    // CheckpointID is a simple wrapper around `sqlx::Uuid` type, exists to make usage of CheckpointID more type safe and convenient
    id *string
    // The process_info property
    process_info *string
    // The status property
    status *string
    // The url property
    url *string
}
// NewCheckpoint instantiates a new Checkpoint and sets the default values.
func NewCheckpoint()(*Checkpoint) {
    m := &Checkpoint{
    }
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateCheckpointFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateCheckpointFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewCheckpoint(), nil
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *Checkpoint) GetAdditionalData()(map[string]any) {
    return m.additionalData
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *Checkpoint) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["id"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetId(val)
        }
        return nil
    }
    res["process_info"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetProcessInfo(val)
        }
        return nil
    }
    res["status"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetStatus(val)
        }
        return nil
    }
    res["url"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetUrl(val)
        }
        return nil
    }
    return res
}
// GetId gets the id property value. CheckpointID is a simple wrapper around `sqlx::Uuid` type, exists to make usage of CheckpointID more type safe and convenient
// returns a *string when successful
func (m *Checkpoint) GetId()(*string) {
    return m.id
}
// GetProcessInfo gets the process_info property value. The process_info property
// returns a *string when successful
func (m *Checkpoint) GetProcessInfo()(*string) {
    return m.process_info
}
// GetStatus gets the status property value. The status property
// returns a *string when successful
func (m *Checkpoint) GetStatus()(*string) {
    return m.status
}
// GetUrl gets the url property value. The url property
// returns a *string when successful
func (m *Checkpoint) GetUrl()(*string) {
    return m.url
}
// Serialize serializes information the current object
func (m *Checkpoint) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteStringValue("id", m.GetId())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("process_info", m.GetProcessInfo())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("status", m.GetStatus())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("url", m.GetUrl())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *Checkpoint) SetAdditionalData(value map[string]any)() {
    m.additionalData = value
}
// SetId sets the id property value. CheckpointID is a simple wrapper around `sqlx::Uuid` type, exists to make usage of CheckpointID more type safe and convenient
func (m *Checkpoint) SetId(value *string)() {
    m.id = value
}
// SetProcessInfo sets the process_info property value. The process_info property
func (m *Checkpoint) SetProcessInfo(value *string)() {
    m.process_info = value
}
// SetStatus sets the status property value. The status property
func (m *Checkpoint) SetStatus(value *string)() {
    m.status = value
}
// SetUrl sets the url property value. The url property
func (m *Checkpoint) SetUrl(value *string)() {
    m.url = value
}
type Checkpointable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetId()(*string)
    GetProcessInfo()(*string)
    GetStatus()(*string)
    GetUrl()(*string)
    SetId(value *string)()
    SetProcessInfo(value *string)()
    SetStatus(value *string)()
    SetUrl(value *string)()
}
